vim-surround:
    ys,ds,cs分别为增加，删除，修改符号的操作符，可以用yss,dss操作整行文本。
    部分常见符号有代码，a=>，b=)，
    ys的格式为ys+文本对象+符号，比如ysiw"，在单词两边增加"
    ys时符号用[，则会两边额外增加空格，用]只增加符号，
    删除的格式为操作符+符号，比如ds"，在单词两边删除"
    修改则不需要文本对象，cs+旧符号+新符号，比如cs"'
    "Hello world!"
    使用cs"<q>后
    <q>Hello world!</q>
    使用cst"后(t代表<>之类的内容)
    "Hello world!"
    使用ds"后
    Hello world!
    光标在H，使用ysiw]
    [Hello] world!
    使用ds]后
    Hello world!
    光标在H，使用ysiw[
    [ Hello ] world!
    选中当前行使用S<p>变成
    <p>
    [ Hello ] world!
    </p>

a.vim:
    key 	Description
    :A 	头文件／源文件切换
    :AN 	在多个匹配文件间循环切换
    <Leader>ih 	切换至光标所在文件
    <Leader>is 	切换至光标所在处(单词所指)文件的配对文件(如光标所在处为foo.h，则切换至foo.c/foo.cpp…)
    <Leader>ihn 	在多个匹配文件间循环切换

nerdcommenter:
    基本操作：
    <leader>cc 	注释当前行
    <leader>c+space 	注释选定代码行
    <leader>cu 	取消注释
    <leader>ca 	在可选的注释方式之间切换，比如C/C++ 的块注释/* */和行注释//
    <leader>cA 	在当前行尾添加注释符，并进入Insert模式

OmniCppComplete:
    OmniCpp_GlobalScopeSearch: 全局查找控制。0:禁止；1:允许(缺省)
    OmniCpp_NamespaceSearch: 命名空间查找控制。
        0: 禁止查找命名空间
        1: 查找当前文件缓冲区内的命名空间(缺省)
        2: 查找当前文件缓冲区和包含文件中的命名空间
    OmniCpp_DisplayMode: 类成员显示控制(是否显示全部公有(public)私有(private)保护(protected)成员)。
        0: 自动
        1: 显示所有成员
    OmniCpp_ShowScopeInAbbr:
    用来控制匹配项所在域的显示位置。缺省情况下，omni显示的补全提示菜单中总是将匹配项所在域信息显示在缩略信息最后一列
        0: 信息缩略中不显示匹配项所在域(缺省)
	1: 显示匹配项所在域，并移除缩略信息中最后一列
    OmniCpp_ShowPrototypeInAbbr: 是否是补全提示缩略信息中显示函数原型。
        0: 不显示(缺省)
        1: 显示原型
    OmniCpp_ShowAccess: 是否显示访问控制信息('+', '-', '#')。0/1, 缺省为1(显示)
    OmniCpp_DefaultNamespaces: 默认命名空间列表，项目间使用','隔开。
	如：let OmniCpp_DefaultNamespaces = ["std', "MyNamespace"]
    OmniCpp_MayCompleteDot: 在'.'号后是否自动运行omnicppcomplete给出提示信息。0/1, 缺省为1
    OmniCpp_MayCompleteArray: 在"->"后是否自动运行omnicppcomplete给出提示信息。0/1, 缺省为1
    OmniCpp_MayCompleteScope: 在域标识符"::"后是否自动运行omnicppcomplete给出提示信息。0/1, 缺省为0
    OmniCpp_SelectFirstItem: 是否自动选择第一个匹配项。仅当"completeopt"不为"longest"时有效。
        0: 不选择第一项(缺省)
        1: 选择第一项并插入到光标位置
        2: 选择第一项但不插入光标位置
    OmniCpp_LocalSearchDecl:
	使用Vim标准查找函数本地(local)查找函数。
	Vim内部用来在函数中查找变量定义的函数需要函数括号位于文本的第一列，而本地查找函数并不需要。

Vundle:
1、下载msysgit并安装http://msysgit.github.io/，具体可见http://drupalchina.cn/content/windows-xi-tong-xia-gitan-zhuang-tu-jie
    安装选择第2个，然后选第3个。
    并将Git的安装目录的bin和cmd目录加入环境变量Path，如D:\soft\Git\cmd;D:\soft\Git\bin
2、运行cmd，输入git --version，出现版本则成功。
3、D:\soft\Git\bin目录新建curl.cmd，内容为
    @rem Do not use "echo off" to not affect any child calls.
    @setlocal

    @rem Get the abolute path to the parent directory, which is assumed to be the
    @rem Git installation root.
    @for /F "delims=" %%I in ("%~dp0..") do @set git_install_root=%%~fI
    @set PATH=%git_install_root%\bin;%git_install_root%\mingw\bin;%PATH%

    @if not exist "%HOME%" @set HOME=%HOMEDRIVE%%HOMEPATH%
    @if not exist "%HOME%" @set HOME=%USERPROFILE%

    @curl.exe %*
4、运行cmd，输入curl --version，出现版本则成功。
5、运行cmd，输入git clone https://github.com/gmarik/vundle.vim.git D:\soft\Vim\vimfiles\bundle\Vundle.vim
    成功后文件结构为D:\soft\Vim\vimfiles\bundle\vundle.vim\autoload
6、配置_vimrc，文件前面加上：
    filetype off
    " 此处规定Vundle的路径
    set rtp+=$VIM/vimfiles/bundle/Vundle.vim/
    call vundle#begin('$VIM/vimfiles/bundle/')
   " alternatively, pass a path where Vundle should install plugins

   " let Vundle manage Vundle, required
   Plugin 'gmarik/Vundle.vim'

   " The following are examples of different formats supported.
   " Keep Plugin commands between vundle#begin/end.
   " plugin on GitHub repo
   Plugin 'tpope/vim-fugitive'
   " plugin from http://vim-scripts.org/vim/scripts.html
   Plugin 'L9'
   " Git plugin not hosted on GitHub
   Plugin 'git://git.wincent.com/command-t.git'
   " git repos on your local machine (i.e. when working on your own plugin)
   Plugin 'file:///home/gmarik/path/to/plugin'
   " The sparkup vim script is in a subdirectory of this repo called vim.
   " Pass the path to set the runtimepath properly.
   Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
   " Avoid a name conflict with L9
   Plugin 'user/L9', {'name': 'newL9'}

   " All of your Plugins must be added before the following line
    call vundle#end()
    filetype plugin indent on     " required! 
7、按上面格式将要安装的插件在配置文件中写好，最后打开VIM执行:PluginInstall
    就可以一键安装了（注意：命令一定要注意大小写）。安装有问题可以按l键查看log。
    我在第一次安装时出现了“can't resolve proxy 'null' for https”的报警，
    调查发现是因为git启用了代理的原因，可以运行cmd输入
    git config --global --unset http.proxy 解决。
    Vundle常用指令
    :BundleList              -列举列表(也就是.vimrc)中配置的所有插件
    :BundleInstall          -安装列表中的全部插件
    :BundleInstall!         -更新列表中的全部插件
    :BundleSearch foo   -查找foo插件
    :BundleSearch! foo  -刷新foo插件缓存
    :BundleClean           -清除列表中没有的插件
    :BundleClean!          -清除列表中没有的插件
